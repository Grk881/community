1. Initialize a Git Repository
Step 1: Open your terminal (or command line).

Step 2: Navigate to your project directory.

Step 3: Initialize the repository with git init.

2. Create and Edit Files
Step 1: Create your project files (e.g., index.html, style.css).

Step 2: Edit your files as needed using your preferred text editor or IDE.

3. Stage Your Changes
Step 1: Check the status of your files with git status.

Step 2: Stage the changes using git add <file> or git add . to stage all changes.

sh
git add index.html
git add .
4. Commit Your Changes
Step 1: Commit the staged changes with a descriptive message.

sh
git commit -m "Initial commit with basic layout"
5. Set Up a Remote Repository
Step 1: Create a repository on a platform like GitHub, GitLab, or Bitbucket.

Step 2: Link your local repository to the remote one.

sh
git remote add origin <repository-url>
6. Push Your Changes
Step 1: Push your local commits to the remote repository.

sh
git push -u origin master
7. Branching and Merging
Step 1: Create a new branch for a feature or bug fix.

sh
git checkout -b new-feature
Step 2: Make and commit your changes.

Step 3: Switch back to the main branch and merge your new branch.

sh
git checkout master
git merge new-feature
8. Handling Conflicts
Step 1: If a conflict arises during merging, Git will prompt you.

Step 2: Open the conflicting files and resolve the conflicts manually.

Step 3: Mark the conflict as resolved and commit the changes.

sh
git add <resolved-file>
git commit -m "Resolved merge conflict"
9. Pulling Updates
Step 1: Keep your local repository up to date with the remote repository.

sh
git pull origin master
10. Collaborating with Others
Step 1: Clone a repository if youâ€™re collaborating on an existing project.

sh
git clone <repository-url>
Step 2: Use branches to work on different features or fixes.

Step 3: Regularly push and pull changes to ensure synchronization.

Example Workflow
Here's a simple example for a basic project:

Initialize: git init

Create: touch index.html

Edit: Use a text editor to add content.

Stage: git add index.html

Commit: git commit -m "Add initial HTML structure"

Remote: git remote add origin <repository-url>

Push: git push -u origin master

Branch: git checkout -b feature-new-style

Edit: Add new styles.

Stage & Commit: git add . and git commit -m "Add new styles"

Merge: git checkout master and git merge feature-new-style

Push: git push
